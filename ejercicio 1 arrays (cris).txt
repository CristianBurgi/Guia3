/*
Realizar un programa para que una Persona pueda adoptar hasta tres Perros. Vamos a contar de
dos clases. Perro, que tendrá como atributos: nombre, raza, edad y tamaño, un constructor que
permita inicializar todos sus atributos y los respectivos métodos getter y setter de sus atributos; y
la clase Persona con atributos: nombre, apellido, edad, documento y tres atributos de tipo Perro,
un constructor que sólo permita inicializar los atributos: nombre, apellido, edad y documento. La
Persona cuenta además con los siguientes métodos:
adoptarPerro() Este método recibe por parámetro un Perro y lo asigna en alguna de las variables
vacías; si todas las variables atributos Perro están ocupadas, mostrará un mensaje “Ya no puedo
adoptar”.
perroMasGrande() Este método retornará el Perro de mayor edad.

Ahora deberemos en el main crear una Persona y 4(cuatro) Perros. Después, vamos a hacer que
persona adopte cada uno de esos Perros (luego al ejecutar veremos que pasa), por último pediremos
a la Persona que nos diga cual es el Perro más viejo.
 */
package guia3ejercicio1b;

import java.util.ArrayList;

/**
 *
 * @author Criss Candioti
 */
public class Guia3Ejercicio1B {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Perro mascota1 = new Perro("Brisa", "Pitbull", 1, "Mediano");
        Perro mascota2 = new Perro("Crystal", "Pitbull", 1, "Mediano");
        Perro mascota3 = new Perro("Sasha", "Pitbull", 6, "Mediano");
        Perro mascota4 = new Perro("Kala", "Akita", 2, "Mediano");
        Persona sujeto1 = new Persona("Cristian", "Candioti", 29, 37685390);
        ArrayList<Perro> mascotas = new ArrayList();
        mascotas.add(mascota1);
        mascotas.add(mascota2);
        mascotas.add(mascota3);
        mascotas.add(mascota4);
        sujeto1.adoptarPerro(mascotas);
        sujeto1.perroMasGrande();
    }

}

-----------------------------------------------------------------

/*
Perro, que tendrá como atributos: nombre, raza, edad y tamaño, un constructor que
permita inicializar todos sus atributos y los respectivos métodos getter y setter de sus atributos;
 */
package guia3ejercicio1b;

/**
 *
 * @author Criss Candioti
 */
public class Perro {

    private String nombre;
    private String raza;
    private int edad;
    private String tamaño;

    public Perro() {
    }

    public Perro(String nombre, String raza, int edad, String tamaño) {
        this.nombre = nombre;
        this.raza = raza;
        this.edad = edad;
        this.tamaño = tamaño;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getRaza() {
        return raza;
    }

    public void setRaza(String raza) {
        this.raza = raza;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    public String getTamaño() {
        return tamaño;
    }

    public void setTamaño(String tamaño) {
        this.tamaño = tamaño;
    }

    @Override
    public String toString() {
        return "Perro{" + "nombre=" + nombre + ", raza=" + raza + ", edad=" + edad + ", tama\u00f1o=" + tamaño + '}';
    }

}

---------------------------------------------------------------------------------

/*
la clase Persona con atributos: nombre, apellido, edad, documento y tres atributos de tipo Perro,
un constructor que sólo permita inicializar los atributos: nombre, apellido, edad y documento. La
Persona cuenta además con los siguientes métodos:
adoptarPerro() Este método recibe por parámetro un Perro y lo asigna en alguna de las variables
vacías; si todas las variables atributos Perro están ocupadas, mostrará un mensaje “Ya no puedo
adoptar”.
perroMasGrande() Este método retornará el Perro de mayor edad.
 */
package guia3ejercicio1b;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author Criss Candioti
 */
public class Persona {

    private String nombre;
    private String apellido;
    private int edad;
    private int documento;
    private List<Perro> mascotas;
    private List<Perro> mascotasAdoptadas;

    public Persona() {
    }

    public Persona(String nombre, String apellido, int edad, int documento) {
        this.nombre = nombre;
        this.apellido = apellido;
        this.edad = edad;
        this.documento = documento;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    public int getDocumento() {
        return documento;
    }

    public void setDocumento(int documento) {
        this.documento = documento;
    }

    public List<Perro> getMascotas() {
        return mascotas;
    }

    public void setMascotas(List<Perro> mascotas) {
        this.mascotas = mascotas;
    }

    public List<Perro> getMascotasAdoptadas() {
        return mascotasAdoptadas;
    }

    public void setMascotasAdoptadas(List<Perro> mascotasAdoptadas) {
        this.mascotasAdoptadas = mascotasAdoptadas;
    }

    @Override
    public String toString() {
        return "Persona{" + "nombre=" + nombre + ", apellido=" + apellido + ", edad=" + edad + ", documento=" + documento + ", mascotas=" + mascotas + ", mascotasAdoptadas=" + mascotasAdoptadas + '}';
    }

    public void adoptarPerro(List<Perro> mascotas) {
        Scanner leer = new Scanner(System.in);
        ArrayList<Perro> adoptados = new ArrayList();
        int limite = 1;
        System.out.println("Bienvenidos a nuestra aplicacion de adopcion");
        System.out.println("Puede adoptar hasta 3 mascotas");
        for (int i = 0; i < mascotas.size(); i++) {
            System.out.println(mascotas.get(i));
            System.out.println("¿Desea adoptar? SI/NO");
            String respuesta = leer.nextLine();
            if ("SI".equals(respuesta) && limite <= 3) {
                System.out.println("Perfecto, lo asignaremos de inmediato");
                adoptados.add(mascotas.get(i));
                limite = limite + 1;
            } else if (limite > 3) {
                System.out.println("Se llego al maximo de mascotas adoptadas");
            } else {
                System.out.println("Bien pasaremos a la siguiente mascota");
            }
        }
        this.mascotasAdoptadas = adoptados;
        System.out.println("Has adoptado a estas mascotas: " + this.mascotasAdoptadas);
    }

    public void perroMasGrande() {
        Perro aux = mascotasAdoptadas.get(0);
        for (int i = 0; i < this.mascotasAdoptadas.size(); i++) {
            if (mascotasAdoptadas.get(i).getEdad() > aux.getEdad()) {
                aux = mascotasAdoptadas.get(i);
            }
        }
        System.out.println("La mascota con mayor edad es: " + aux);
    }
}

------------------------------------------------------------------------------



